
Ändra listener-systemet så att man inte har 100tals metoder för olika "meddelande" mellan HeroInfo, Player, hud, osv.
ANvänd istället klassen Message med tillhörande MessageType. Endast en ilstener behövs. "MessageListerner", istället för HeroInfoListemer
HUDLIistener, osv...













Server till klient:
----------------------------------------
TCP addEntity(ID, health%, mana%, name, pixelPos, animation, attachedAnimations, velocity)
TCP addVisualEffect(ID, pixelPos, animation, velocity)
TCP addRectangle(ID, pixelPos, dimension, color, velocity)
TCP addCircle(ID, pixelPos, radius, color, velocity)
TCP remove(ID)
UDP update(ID, pixelPos, velocity)
UDP update(ID, health%, mana%)
TCP setTextbox(pixelPos, dimension, text)
TCP removeTextBox()



Klient till server:
----------------------------------------
TCP mousePressed
TCP buttonPressed
UDP mouseMoved




2 st program

slave och master

spelaren som styr Heron kör masterprogrammet. Det funkar ung. som nu, fast tar emot musinput
från slaven istället.

Slave-programmet "kör" inget själv utan renderar bara (sånt som det får skickat till sig från mastern)
Man har alltså en lista med "grejer" som ska renderas. Varje sån grej motsvarar en klass.
Man mappar varje instans till data som behövs för att rendera instansen.
Varje instans har ett ID, så att det är billigt att referera till den när mastern ska uppdatera dess data.

--------------------------------------------------------
RenderObjects för slaven:

game.objects.Entity kan ärva från denna!
rendering.Entity extends rendering.VisualEffect
- % health
- % mana
- name
- pixelPos
- animation
- attached animations (from buffs)


rendering.VisualEffect extends Renderable
- pixelPos
- animation

rendering.TextBox extends Renderable
- Rectangle (dim and pos)
- text

rendering.Rectangle extends Renderable
- Rectangle
- color

rendering.Circle extends Renderable
- pixelPos
- radius
- color

(rendering.Renderable)









